{"version":3,"sources":["render.js","render.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,OAAO,EAAE,gCAAgC,CAAC,EAAE,OAAO,CAAC,CAAC;KACzI;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACRjB,QAAY,GAAG,GAAA,OAAA,CAAM,eACrB,CAAC,CADmC;AACpC,QAAA,KAAA,GAAA,OAAA,CACoE,eACpE,CAAC,CADkF;AACnF,QAAA,KAAA,GAAA,OAAA,CAAuB,eACvB,CAAC,CADqC;AACtC,QAAA,IAAA,GAAA,OAAA,CAAyB,OACzB,CAAC,CAD+B;AAChC,QAAA,gBAAA,GAAA,OAAA,CAAiC,gCAGjC,CAAC,CAHgE;AAGjE,aAAA,MAAA,CAA+B,GAAS,EAA6B;YAA3B,OAAO,yDAAkB,EAAE;;AACpE,aAAK,CAAC,OAAO,CAAC,CAAA;AACd,SAAC,CAAC,GAAG,CAAC,CAAA;AACN,cAAM,GAAG,GAAG,MAAM,CAAA;AAClB,gBAAQ,EAAE,CAAA;AACV,eAAO,GAAG,CAAA;KACV;AAND,UAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,CAAA;ADcI,WAAO,CAAC,OAAO,GAAG,MCRrB,CAAA;AAOD,aAAA,mBAAA,CAAoC,GAAS,EAAE,UAAkB,EAAE,WAAmB,EAA6B;YAA3B,OAAO,yDAAkB,EAAE;;AAClH,aAAK,CAAC,OAAO,CAAC,CAAA;AACd,uBAAe,CAAC,UAAU,EAAE,WAAW,CAAC,CAAA;AACxC,SAAC,CAAC,GAAG,CAAC,CAAA;AACN,cAAM,GAAG,GAAG,EAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,MAAM,EAAE,EAAC,CAAA;AACzD,gBAAQ,EAAE,CAAA;AACV,eAAO,GAAG,CAAA;KACV;AAPe,WAAA,CAAA,mBAAmB,GAAA,mBAOlC,CAAA;AAQD,QAEC,MAAc,EACd,YAAoB,EACpB,SAAiB,EAEjB,eAAwB,EACxB,MAAY,EACZ,UAAkB,EAClB,SAA6B,EAC7B,OAAe,EACf,SAAiB,EACjB,aAAuB,EAEvB,IAAa,CAAA;AAEd,aAAA,KAAA,CAAe,OAAsB,EAAA;AACpC,YAAI,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;AAE5B,oBAAY,GAAG,CAAC,CAAA;AAChB,kBAAU,EAAE,CAAA;AACZ,cAAM,GAAG,EAAE,CAAA;AACX,uBAAe,GAAG,KAAK,CAAA;KACvB;AAED,aAAA,eAAA,CAAyB,MAAc,EAAE,OAAe,EAAA;AACvD,uBAAe,GAAG,IAAI,CAAA;AACtB,kBAAU,GAAG,MAAM,CAAA;AACnB,iBAAS,GAAG,IAAI,gBAAA,CAAA,kBAAkB,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAA;AACnD,eAAO,GAAG,KAAA,CAAA,GAAG,CAAC,KAAK,CAAC,IAAI,CAAA;AACxB,iBAAS,GAAG,KAAA,CAAA,GAAG,CAAC,KAAK,CAAC,MAAM,CAAA;AAC5B,qBAAa,GAAG,IAAI,CAAA;KACpB;AAED,aAAA,QAAA,GAAA;AACC,cAAM,GAAG,UAAU,GAAG,SAAS,GAAG,MAAM,GAAG,aAAa,GAAG,IAAI,CAAA;KAC/D;AAGD,aAAA,CAAA,CAAW,GAAS,EAAA;AACnB,YAAI,eAAe,EAClB,MAAM,GAAG,GAAG,CAAC;AACP,WAAI,CAAC,YAAY,CAAC,EAAE,CAAA;KAC3B;AAID,aAAA,CAAA,CAAW,GAAW,EAAA;AACrB,cAAM,GAAG,MAAM,GAAG,GAAG,CAAA;AACrB,YAAI,eAAe,EAClB,OAAO,CAAC,GAAG,CAAC,CAAA;KACb;AAED,aAAA,UAAA,CAAoB,IAAiB,EAAE,GAAW,EAAA;AACjD,YAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AACnB,kBAAM,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;AAC5B,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACpC,iBAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AACV,iBAAC,CAAC,GAAG,CAAC,CAAA;aACN;AACD,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;SACb;KACD;AAED,aAAA,KAAA,CAAe,IAAiB,EAAA;AAC/B,SAAC,CAAC,GAAG,CAAC,CAAA;AACN,kBAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;AACrB,SAAC,CAAC,GAAG,CAAC,CAAA;KACN;AAED,aAAA,KAAA,CAAe,UAAuB,EAAE,aAAqB,EAAA;AAC5D,YAAI,OAAO,CAAC,UAAU,CAAC,EACtB,CAAC,CAAC,IAAI,CAAC,CAAA,KACH;AACJ,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,kBAAM,EAAE,CAAA;AACR,cAAE,EAAE,CAAA;AACJ,iBAAK,CAAC,UAAU,EAAE,aAAa,CAAC,CAAA;AAChC,oBAAQ,EAAE,CAAA;AACV,cAAE,EAAE,CAAA;AACJ,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;KACD;AAED,aAAA,KAAA,CAAe,KAAkB,EAAE,aAAqB,EAAA;AACvD,YAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACrB,kBAAM,IAAI,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA;AAC7B,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACpC,iBAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;AACX,iBAAC,CAAC,aAAa,CAAC,CAAA;AAChB,kBAAE,EAAE,CAAA;aACJ;AACD,aAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;SACd;KACD;AAED,UAAM,UAAU,GAAG,CAAC,EAAE,CAAC,CAAA;AACvB,aAAA,UAAA,GAAA;AACC,iBAAS,GAAG,UAAU,CAAC,YAAY,CAAC,CAAA;AACpC,eAAO,SAAS,KAAK,SAAS,EAAE;AAC/B,sBAAU,CAAC,IAAI,CAAC,CAAA,GAAG,IAAI,CAAC,UAAU,CAAC,EAAA,EAAA,CAAI,CAAC,CAAA;AACxC,qBAAS,GAAG,UAAU,CAAC,YAAY,CAAC,CAAA;SACpC;KACD;AAED,aAAA,MAAA,GAAA;AACC,YAAI,CAAC,IAAI,EAAE;AACV,wBAAY,GAAG,YAAY,GAAG,CAAC,CAAA;AAC/B,sBAAU,EAAE,CAAA;SACZ;KACD;AAED,aAAA,QAAA,GAAA;AACC,YAAI,CAAC,IAAI,EAAE;AACV,wBAAY,GAAG,YAAY,GAAG,CAAC,CAAA;AAC/B,sBAAU,EAAE,CAAA;SACZ;KACD;AAED,aAAA,EAAA,GAAA;AACC,YAAI,CAAC,IAAI,EAAE;AACV,kBAAM,GAAG,CAAA,GAAG,MAAM,EAAA,EAAA,GAAK,SAAS,EAAA,CAAE,CAAA;AAClC,gBAAI,eAAe,EAClB,WAAW,EAAE,CAAA;SACd;KACD;AAGD,aAAA,OAAA,CAAiB,GAAW,EAAA;AAC3B,YAAI,MAAM,KAAK,aAAa,EAC3B,IAAA,CAAA,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,IAAA;AACrB,qBAAS,CAAC,UAAU,CAAC;AACpB,sBAAM,EAAE,UAAU;AAClB,wBAAQ,EAAE,GAAG,CAAC,KAAK;AACnB,yBAAS,EAAE,IAAI,KAAA,CAAA,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;aACtC,CAAC,CAAA;AACF,yBAAa,GAAG,MAAM,CAAA;SACtB,CAAC,CAAA;AACH,iBAAS,GAAG,SAAS,GAAG,GAAG,CAAC,MAAM,CAAA;KAClC;AACD,aAAA,WAAA,GAAA;AACC,eAAO,GAAG,OAAO,GAAG,CAAC,CAAA;AACrB,iBAAS,GAAG,KAAA,CAAA,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,YAAY,CAAA;AAE3C,qBAAa,GAAG,IAAI,CAAA;KACpB;AAID,aAAA,GAAA,GAAA;AACC,YAAI,IAAI,CAAC,KAAK,EACb,CAAC,CAAC,QAAQ,CAAC,CAAA;AACZ,SAAC,CAAC,UAAU,CAAC,CAAA;AACb,YAAI,IAAI,CAAC,SAAS,EACjB,CAAC,CAAC,GAAG,CAAC,CAAA;AACP,YAAI,IAAI,CAAC,EAAE,KAAK,IAAI,EAAE;AACrB,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;SACV;AACD,aAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAClB,SAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KACZ;AAED,aAAA,GAAA,GAAA;AACC,YAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EACzB,CAAC,CAAC,IAAI,CAAC,CAAA,KACH;AACJ,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,sBAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA;AAC9B,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;KACD;AAED,aAAA,MAAA,GAAA;AACC,SAAC,CAAC,QAAQ,CAAC,CAAA;AACX,YAAI,IAAI,CAAC,EAAE,KAAK,IAAI,EACnB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AACX,YAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;AAC7B,aAAC,CAAC,WAAW,CAAC,CAAA;AACd,aAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SAClB;AACD,SAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KACZ;AAGD,aAAA,OAAA,CAAiB,CAAmB,EAAE,IAAY,EAAA;AACjD,SAAC,CAAC,MAAM,CAAC,CAAA;AACT,SAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;AACT,SAAC,CAAC,IAAI,CAAC,CAAA;AACP,SAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;AACV,SAAC,CAAC,GAAG,CAAC,CAAA;AACN,SAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;KACT;AAGD,aAAA,aAAA,CAAuB,MAAW,EAAE,MAAc,EAAE,UAAe,EAAA;AAClE,cAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,AAAC,IAAY,IAAA;AAC5C,kBAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,CAAA;SACjD,CAAC,CAAA;KACF;AAED,aAAA,OAAA,CAAoB,GAAa,EAAA;AAChC,eAAO,GAAG,CAAC,MAAM,KAAK,CAAC,CAAA;KACvB;AAED,aAAA,IAAA,CAAiB,GAAa,EAAA;AAC7B,eAAO,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;KAC1B;AAED,UAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAA;AAErC,iBAAa,CAAC,GAAG,EAAE,YAAY,EAAE;AAChC,eAAO,GAAA;AACN,iBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;SACrB;AAED,kBAAU,GAAA;AACT,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACZ;AAGD,sBAAc,GAAA,EAAM;AACpB,sBAAc,GAAA;AACb,iBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;SACrB;AACD,2BAAmB,GAAA;AAClB,aAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SAClB;AACD,mBAAW,GAAA;AACV,aAAC,CAAC,KAAK,CAAC,CAAA;AACR,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;AAClB,gBAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;AAC5B,oBAAI,EAAE,IAAI,CAAC,UAAU,YAAY,KAAA,CAAA,cAAc,CAAA,AAAC,EAC/C,CAAC,CAAC,GAAG,CAAC,CAAA;AACP,iBAAC,CAAC,QAAQ,CAAC,CAAA;AACX,iBAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;aACjB;SACD;AACD,wBAAgB,GAAA;AACf,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACb,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACZ;AACD,sBAAc,GAAA;AACb,aAAC,CAAC,OAAO,CAAC,CAAA;AACV,gBAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;AACxB,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,iBAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aACb;SACD;AACD,yBAAiB,GAAA;AAChB,aAAC,CAAC,UAAU,CAAC,CAAA;AACb,gBAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;AACxB,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,iBAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aACb;SACD;AACD,kBAAU,GAAA;AACT,gBAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EACrB,CAAC,CAAC,SAAS,CAAC,CAAA,KACR;AACJ,iBAAC,CAAC,OAAO,CAAC,CAAA;AACV,iBAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aACZ;AACD,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,oBAAQ,IAAI,CAAC,UAAU,CAAC,MAAM;AAC7B,qBAAK,CAAC;AACL,0BAAK;AAAA,AACN,qBAAK,CAAC;AACL,qBAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;AACrB,0BAAK;AAAA,AACN;AACC,0BAAM,EAAE,CAAA;AACR,sBAAE,EAAE,CAAA;AACJ,yBAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAA;AAC3B,4BAAQ,EAAE,CAAA;AAAA,aACX;SACD;AACD,uBAAe,GAAA;AACd,aAAC,CAAC,SAAS,CAAC,CAAA;AACZ,aAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;AACpB,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,iBAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;SACrB;AACD,uBAAe,GAAA;AACd,gBAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EACzB,CAAC,CAAC,QAAQ,CAAC,CAAA,KACP;AACJ,iBAAC,CAAC,SAAS,CAAC,CAAA;AACZ,iBAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;aAChB;SACD;AACD,sBAAc,GAAA;AACb,aAAC,CAAC,QAAQ,CAAC,CAAA;AACX,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAChB;AACD,mBAAW,GAAA;AACV,aAAC,CAAC,QAAQ,CAAC,CAAA;AACX,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACb,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACZ;AACD,oBAAY,GAAA;AACX,aAAC,CAAC,MAAM,CAAC,CAAA;AACT,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACb,gBAAI,IAAI,CAAC,OAAO,KAAK,IAAI,EACxB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;AAChB,gBAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;AAC5B,iBAAC,CAAC,SAAS,CAAC,CAAA;AACZ,iBAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;aACjB;SACD;AACD,sBAAc,GAAA;AACb,aAAC,CAAC,QAAQ,CAAC,CAAA;AACX,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACZ;AACD,wBAAgB,GAAA;AACf,aAAC,CAAC,KAAK,CAAC,CAAA;AACR,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,gBAAI,EAAE,IAAI,CAAC,IAAI,YAAY,KAAA,CAAA,cAAc,CAAA,AAAC,EACzC,CAAC,CAAC,GAAG,CAAC,CAAA;AACP,aAAC,CAAC,SAAS,CAAC,CAAA;AACZ,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;AACD,oBAAY,GAAA;AACX,aAAC,CAAC,MAAM,CAAC,CAAA;AACT,gBAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EACrB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACb,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,gBAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EACrB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACb,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,gBAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EACvB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACf,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACZ;AACD,sBAAc,GAAA;AACb,mBAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;SACrB;AACD,sBAAc,GAAA;AACb,mBAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;SACrB;AACD,yBAAiB,GAAA;AAChB,aAAC,CAAC,UAAU,CAAC,CAAA;SACb;AAGD,2BAAmB,EAAE,GAAG;AACxB,0BAAkB,GAAA;AACjB,aAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AACV,gBAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;AACvB,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,iBAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aACZ;SACD;AACD,2BAAmB,GAAA;AAClB,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,sBAAU,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAA;SAClC;AAGD,sBAAc,GAAA;AACb,aAAC,CAAC,MAAM,CAAC,CAAA;SACT;AACD,uBAAe,EAAE,GAAG;AACpB,wBAAgB,GAAA;AACf,gBAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAC3B,CAAC,CAAC,IAAI,CAAC,CAAA,KAEP,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAA;SAC5B;AACD,qBAAa,GAAA;AACZ,6BAAiB,CAAC,IAAI,CAAC,CAAA;AACvB,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACb;AACD,sBAAc,GAAA;AACb,gBAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EACnB,CAAC,CAAC,QAAQ,CAAC,CAAA;AACZ,gBAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EACvB,CAAC,CAAC,GAAG,CAAC,CAAA;AACP,kCAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;SACxC;AACD,mBAAW,GAAA;AACV,aAAC,CAAC,MAAM,CAAC,CAAA;AACT,kCAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;SACxC;AACD,mBAAW,GAAA;AACV,aAAC,CAAC,MAAM,CAAC,CAAA;AACT,kCAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;SACxC;AAED,0BAAkB,EAAE,GAAG;AACvB,+BAAuB,GAAA;AACtB,gBAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,KAAA,CAAA,UAAU,EACnE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA,KAEjB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACnB,aAAC,CAAC,IAAI,CAAC,CAAA;AACP,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACZ;AACD,0BAAkB,GAAA;AACjB,sBAAU,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAA;SACjC;AACD,uBAAe,GAAA;AACd,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAChB,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAChB;AACD,wBAAgB,GAAA;AACf,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,aAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,GAAG,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAA;AAClE,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACb,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;AACD,4BAAoB,GAAA;AACnB,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAChB,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACb;AACD,wBAAgB,GAAA;AACf,gBAAI,IAAI,CAAC,MAAM,EAAE;AAChB,iBAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAChB,iBAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;aAChB,MAAM;AACN,iBAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAChB,iBAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;aAChB;SACD;AACD,yBAAiB,GAAA;AAChB,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAChB,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACb,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;AACD,6BAAqB,GAAA;AACpB,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;AAClB,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;AACjB,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;AACD,qBAAa,GAAA;AACZ,aAAC,CAAC,OAAO,CAAC,CAAA;AACV,aAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACd,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,iBAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;SACrB;AACD,aAAK,GAAA;AACJ,aAAC,CAAC,OAAO,CAAC,CAAA;SACV;AACD,sBAAc,GAAA;AACb,gBAAI,IAAI,CAAC,MAAM,YAAY,KAAA,CAAA,uBAAuB,EAAE;AACnD,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,iBAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACd,iBAAC,CAAC,GAAG,CAAC,CAAA;aACN,MACA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACf,iBAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;SACrB;AACD,qBAAa,GAAA;AACZ,aAAC,CAAC,KAAK,CAAC,CAAA;AACR,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAChB;AACD,6BAAqB,GAAA;AACpB,aAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAEd,gBAAI,IAAI,CAAC,MAAM,YAAY,KAAA,CAAA,OAAO,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,QAAQ,IAC1E,IAAI,CAAC,MAAM,CAAC,KAAK,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAA,AAAC,EAC7C,CAAC,CAAC,IAAI,CAAC,CAAA,KAEP,CAAC,CAAC,GAAG,CAAC,CAAA;AACP,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAChB;AACD,gCAAwB,GAAA;AACvB,aAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACd,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAChB,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;AACD,uBAAe,GAAA;AACd,gBAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EACzB,CAAC,CAAC,SAAS,CAAC,CAAA,KACR;AACJ,iBAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,SAAS,CAAC,CAAA;AACzC,oBAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EACzB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AACjB,iBAAC,CAAC,GAAG,CAAC,CAAA;aACN;SACD;AAED,eAAO,GAAA;AACN,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;SACxB;AACD,mBAAW,GAAA;AACV,aAAC,CAAC,MAAM,CAAC,CAAA;SACT;AACD,qBAAa,GAAA;AACZ,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA;AACrC,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;AAED,uBAAe,GAAA;AACd,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;SACjB;AACD,uBAAe,GAAA;AACd,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;AACjB,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAG;AACxD,iBAAC,CAAC,IAAI,CAAC,CAAA;AACP,iBAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA;AACtB,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,iBAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;aACrB;AACD,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;AACD,gCAAwB,GAAA;AACvB,aAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AACX,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACb;AAGD,0BAAkB,GAAA;AACjB,aAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AACX,gBAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,EAAE;AAC5B,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,iBAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aACb;SACD;AACD,qBAAa,GAAA;AACZ,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,sBAAU,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAA;AAChC,aAAC,CAAC,GAAG,CAAC,CAAA;SACN;AACD,oBAAY,EAAE,GAAG;AACjB,mBAAW,GAAA;AACV,aAAC,CAAC,KAAK,CAAC,CAAA;AACR,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAChB;AAED,6BAAqB,GAAA;AACpB,gBAAI,IAAI,CAAC,MAAM,EACd,CAAC,CAAC,SAAS,CAAC,CAAA;AAEb,gBAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EACnB,CAAC,CAAC,QAAQ,CAAC,CAAA;AACZ,gBAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EACvB,CAAC,CAAC,GAAG,CAAC,CAAA;AAEP,gBAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC3B,iBAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,iBAAC,CAAC,GAAG,CAAC,CAAA;aACN;AAED,gBAAI,IAAI,CAAC,QAAQ,EAAE;AAClB,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,iBAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AACX,iBAAC,CAAC,GAAG,CAAC,CAAA;aACN,MACA,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AAEZ,iBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AACxB,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;SAClB;AAED,mCAA2B,GAAA;AAC1B,aAAC,CAAC,aAAa,CAAC,CAAA;AAChB,iBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AACxB,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;SAClB;AAED,iBAAS,GAAA;AACR,iBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;SACpB;AAED,wBAAgB,EAAE,MAAM;AACxB,uBAAe,EAAE,MAAM;AAEvB,oBAAY,GAAA;AACX,aAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACZ,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAChB;AAED,yBAAiB,GAAA;AAChB,aAAC,CAAC,SAAS,CAAC,CAAA;AAEZ,gBAAI,GAA2B,EAAE,SAAmC,CAAA;AACpE,kBAAM,UAAU,GAA2B,EAAE,CAAA;AAC7C,iBAAK,MAAM,CAAC,IAAI,IAAI,CAAC,UAAU,EAC9B,IAAI,CAAC,YAAY,KAAA,CAAA,sBAAsB;AACtC,oBAAI,GAAG,KAAK,SAAS,EACpB,GAAG,GAAG,CAAC,CAAA,KAEP,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;mBACxC,IAAI,CAAC,YAAY,KAAA,CAAA,wBAAwB;AAC7C,oBAAI,SAAS,KAAK,SAAS,EAC1B,SAAS,GAAG,CAAC,CAAA,KAEb,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;mBAG9C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AAEpB,gBAAI,SAAS,GAAG,KAAK,CAAA;AACrB,gBAAI,GAAG,KAAK,SAAS,EAAE;AACtB,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,yBAAS,GAAG,IAAI,CAAA;aAChB;AACD,gBAAI,SAAS,KAAK,SAAS,EAAE;AAC5B,oBAAI,SAAS,EACZ,CAAC,CAAC,GAAG,CAAC,CAAA;AACP,iBAAC,CAAC,SAAS,CAAC,CAAA;AACZ,yBAAS,GAAG,IAAI,CAAA;aAChB;AACD,gBAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACzB,oBAAI,SAAS,EACZ,CAAC,CAAC,GAAG,CAAC,CAAA;AACP,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,0BAAU,CAAC,UAAU,EAAE,GAAG,CAAC,CAAA;AAC3B,iBAAC,CAAC,GAAG,CAAC,CAAA;aACN;AAED,aAAC,CAAC,QAAQ,CAAC,CAAA;AACX,aAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SACd;AACD,uBAAe,GAAA;AACd,gBAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,EAC/B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,KACT;AACJ,iBAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAChB,iBAAC,CAAC,MAAM,CAAC,CAAA;AACT,iBAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aACb;SACD;AACD,8BAAsB,GAAA;AACrB,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACb;AACD,gCAAwB,GAAA;AACvB,aAAC,CAAC,OAAO,CAAC,CAAA;AACV,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACb;AAED,uBAAe,GAAA;AACd,aAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACb,gBAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,EAAE;AACjC,iBAAC,CAAC,MAAM,CAAC,CAAA;AACT,iBAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;aAChB;SACD;AACD,8BAAsB,GAAA;AACrB,aAAC,CAAC,SAAS,CAAC,CAAA;AACZ,gBAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;AAC9B,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,0BAAU,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAA;AAChC,iBAAC,CAAC,GAAG,CAAC,CAAA;AACN,oBAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;AACzB,qBAAC,CAAC,QAAQ,CAAC,CAAA;AACX,qBAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;iBACd;aACD,MACA,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SACpB;AACD,gCAAwB,GAAA;AACvB,aAAC,CAAC,iBAAiB,CAAC,CAAA;AACpB,aAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SACnB;AACD,4BAAoB,GAAA;AACnB,aAAC,CAAC,gBAAgB,CAAC,CAAA;AACnB,aAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SACd;KACD,CAAC,CAAA;AAEF,aAAA,iBAAA,CAA2B,CAAW,EAAA;AACrC,YAAI,CAAC,CAAC,QAAQ,EAAE;AACf,aAAC,CAAC,GAAG,CAAC,CAAA;AACN,aAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACR,aAAC,CAAC,GAAG,CAAC,CAAA;SACN,MACA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;KACT;AAED,aAAA,sBAAA,CAAgC,CAAW,EAAE,KAAyB,EAAA;AACrE,yBAAiB,CAAC,CAAC,CAAC,CAAA;AACpB,aAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AACnB,SAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;KACb;AAED,aAAA,sBAAA,CAAgC,GAAW,EAAA;AAE1C,eAAO,GAAG,CAAC,OAAO,CAAC,gCAAgC,EAAE,EAAE,IAAI,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;KAClF;AAED,UAAM,cAAc,GAAwB,IAAI,GAAG,CAAC,CACnD,CAAC,IAAI,EAAE,MAAM,CAAC,EACd,CAAC,GAAG,EAAE,KAAK,CAAC,EACZ,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,QAAQ,EAAE,SAAS,CAAC,EACrB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,CAAA;CD9EvB,CAAC,CAAC","file":"render.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/ast', 'esast/lib/ast', 'esast/lib/Loc', 'op/Op', 'source-map/dist/source-map.min'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Ast = require('esast/lib/ast');\n    var ast_1 = require('esast/lib/ast');\n    var Loc_1 = require('esast/lib/Loc');\n    var Op_1 = require('op/Op');\n    var source_map_min_1 = require('source-map/dist/source-map.min');\n    function render(ast, options = {}) {\n        setUp(options);\n        e(ast);\n        const res = strOut;\n        tearDown();\n        return res;\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = render;\n    function renderWithSourceMap(ast, inFilePath, outFilePath, options = {}) {\n        setUp(options);\n        setUpSourceMaps(inFilePath, outFilePath);\n        e(ast);\n        const res = { code: strOut, sourceMap: sourceMap.toJSON() };\n        tearDown();\n        return res;\n    }\n    exports.renderWithSourceMap = renderWithSourceMap;\n    let strOut, indentAmount, indentStr, usingSourceMaps, curAst, inFilePath, sourceMap, outLine, outColumn, lastMappedAst, ugly;\n    function setUp(options) {\n        ugly = Boolean(options.ugly);\n        indentAmount = 0;\n        _setIndent();\n        strOut = '';\n        usingSourceMaps = false;\n    }\n    function setUpSourceMaps(inPath, outPath) {\n        usingSourceMaps = true;\n        inFilePath = inPath;\n        sourceMap = new source_map_min_1.SourceMapGenerator({ file: outPath });\n        outLine = Loc_1.Pos.start.line;\n        outColumn = Loc_1.Pos.start.column;\n        lastMappedAst = null;\n    }\n    function tearDown() {\n        strOut = inFilePath = sourceMap = curAst = lastMappedAst = null;\n    }\n    function e(ast) {\n        if (usingSourceMaps)\n            curAst = ast;\n        ast[renderSymbol]();\n    }\n    function o(str) {\n        strOut = strOut + str;\n        if (usingSourceMaps)\n            _mapStr(str);\n    }\n    function interleave(asts, str) {\n        if (!isEmpty(asts)) {\n            const maxI = asts.length - 1;\n            for (let i = 0; i < maxI; i = i + 1) {\n                e(asts[i]);\n                o(str);\n            }\n            e(asts[maxI]);\n        }\n    }\n    function paren(asts) {\n        o('(');\n        interleave(asts, ',');\n        o(')');\n    }\n    function block(blockLines, lineSeparator) {\n        if (isEmpty(blockLines))\n            o('{}');\n        else {\n            o('{');\n            indent();\n            nl();\n            lines(blockLines, lineSeparator);\n            unindent();\n            nl();\n            o('}');\n        }\n    }\n    function lines(lines, lineSeparator) {\n        if (lines.length > 0) {\n            const maxI = lines.length - 1;\n            for (let i = 0; i < maxI; i = i + 1) {\n                e(lines[i]);\n                o(lineSeparator);\n                nl();\n            }\n            e(lines[maxI]);\n        }\n    }\n    const indentStrs = [''];\n    function _setIndent() {\n        indentStr = indentStrs[indentAmount];\n        while (indentStr === undefined) {\n            indentStrs.push(`${last(indentStrs)}\\t`);\n            indentStr = indentStrs[indentAmount];\n        }\n    }\n    function indent() {\n        if (!ugly) {\n            indentAmount = indentAmount + 1;\n            _setIndent();\n        }\n    }\n    function unindent() {\n        if (!ugly) {\n            indentAmount = indentAmount - 1;\n            _setIndent();\n        }\n    }\n    function nl() {\n        if (!ugly) {\n            strOut = `${strOut}\\n${indentStr}`;\n            if (usingSourceMaps)\n                _mapNewLine();\n        }\n    }\n    function _mapStr(str) {\n        if (curAst !== lastMappedAst)\n            Op_1.opEach(curAst.loc, loc => {\n                sourceMap.addMapping({\n                    source: inFilePath,\n                    original: loc.start,\n                    generated: new Loc_1.Pos(outLine, outColumn)\n                });\n                lastMappedAst = curAst;\n            });\n        outColumn = outColumn + str.length;\n    }\n    function _mapNewLine() {\n        outLine = outLine + 1;\n        outColumn = Loc_1.Pos.start.column + indentAmount;\n        lastMappedAst = null;\n    }\n    function fun() {\n        if (this.async)\n            o('async ');\n        o('function');\n        if (this.generator)\n            o('*');\n        if (this.id !== null) {\n            o(' ');\n            e(this.id);\n        }\n        paren(this.params);\n        e(this.body);\n    }\n    function arr() {\n        if (isEmpty(this.elements))\n            o('[]');\n        else {\n            o('[');\n            interleave(this.elements, ',');\n            o(']');\n        }\n    }\n    function rClass() {\n        o('class ');\n        if (this.id !== null)\n            e(this.id);\n        if (this.superClass !== null) {\n            o(' extends ');\n            e(this.superClass);\n        }\n        e(this.body);\n    }\n    function forInOf(_, kind) {\n        o('for(');\n        e(_.left);\n        o(kind);\n        e(_.right);\n        o(')');\n        e(_.body);\n    }\n    function implementMany(holder, method, nameToImpl) {\n        Object.keys(nameToImpl).forEach((name) => {\n            holder[name].prototype[method] = nameToImpl[name];\n        });\n    }\n    function isEmpty(arr) {\n        return arr.length === 0;\n    }\n    function last(arr) {\n        return arr[arr.length - 1];\n    }\n    const renderSymbol = Symbol('render');\n    implementMany(Ast, renderSymbol, {\n        Program() {\n            lines(this.body, ';');\n        },\n        Identifier() {\n            o(this.name);\n        },\n        EmptyStatement() { },\n        BlockStatement() {\n            block(this.body, ';');\n        },\n        ExpressionStatement() {\n            e(this.expression);\n        },\n        IfStatement() {\n            o('if(');\n            e(this.test);\n            o(')');\n            e(this.consequent);\n            if (this.alternate !== null) {\n                if (!(this.consequent instanceof ast_1.BlockStatement))\n                    o(';');\n                o(' else ');\n                e(this.alternate);\n            }\n        },\n        LabeledStatement() {\n            e(this.label);\n            o(':');\n            e(this.body);\n        },\n        BreakStatement() {\n            o('break');\n            if (this.label !== null) {\n                o(' ');\n                e(this.label);\n            }\n        },\n        ContinueStatement() {\n            o('continue');\n            if (this.label !== null) {\n                o(' ');\n                e(this.label);\n            }\n        },\n        SwitchCase() {\n            if (this.test === null)\n                o('default');\n            else {\n                o('case ');\n                e(this.test);\n            }\n            o(':');\n            switch (this.consequent.length) {\n                case 0:\n                    break;\n                case 1:\n                    e(this.consequent[0]);\n                    break;\n                default:\n                    indent();\n                    nl();\n                    lines(this.consequent, ';');\n                    unindent();\n            }\n        },\n        SwitchStatement() {\n            o('switch(');\n            e(this.discriminant);\n            o(')');\n            block(this.cases, '');\n        },\n        ReturnStatement() {\n            if (this.argument === null)\n                o('return');\n            else {\n                o('return ');\n                e(this.argument);\n            }\n        },\n        ThrowStatement() {\n            o('throw ');\n            e(this.argument);\n        },\n        CatchClause() {\n            o('catch(');\n            e(this.param);\n            o(')');\n            e(this.body);\n        },\n        TryStatement() {\n            o('try ');\n            e(this.block);\n            if (this.handler !== null)\n                e(this.handler);\n            if (this.finalizer !== null) {\n                o('finally');\n                e(this.finalizer);\n            }\n        },\n        WhileStatement() {\n            o('while(');\n            e(this.test);\n            o(')');\n            e(this.body);\n        },\n        DoWhileStatement() {\n            o('do ');\n            e(this.body);\n            if (!(this.body instanceof ast_1.BlockStatement))\n                o(';');\n            o(' while(');\n            e(this.test);\n            o(')');\n        },\n        ForStatement() {\n            o('for(');\n            if (this.init !== null)\n                e(this.init);\n            o(';');\n            if (this.test !== null)\n                e(this.test);\n            o(';');\n            if (this.update !== null)\n                e(this.update);\n            o(')');\n            e(this.body);\n        },\n        ForInStatement() {\n            forInOf(this, ' in ');\n        },\n        ForOfStatement() {\n            forInOf(this, ' of ');\n        },\n        DebuggerStatement() {\n            o('debugger');\n        },\n        FunctionDeclaration: fun,\n        VariableDeclarator() {\n            e(this.id);\n            if (this.init !== null) {\n                o('=');\n                e(this.init);\n            }\n        },\n        VariableDeclaration() {\n            o(this.kind);\n            o(' ');\n            interleave(this.declarations, ',');\n        },\n        ThisExpression() {\n            o('this');\n        },\n        ArrayExpression: arr,\n        ObjectExpression() {\n            if (isEmpty(this.properties))\n                o('{}');\n            else\n                block(this.properties, ',');\n        },\n        PropertyPlain() {\n            outputPropertyKey(this);\n            o(':');\n            e(this.value);\n        },\n        PropertyMethod() {\n            if (this.value.async)\n                o('async ');\n            if (this.value.generator)\n                o('*');\n            outputPropertyFunction(this, this.value);\n        },\n        PropertyGet() {\n            o('get ');\n            outputPropertyFunction(this, this.value);\n        },\n        PropertySet() {\n            o('set ');\n            outputPropertyFunction(this, this.value);\n        },\n        FunctionExpression: fun,\n        ArrowFunctionExpression() {\n            if (this.params.length === 1 && this.params[0] instanceof ast_1.Identifier)\n                e(this.params[0]);\n            else\n                paren(this.params);\n            o('=>');\n            e(this.body);\n        },\n        SequenceExpression() {\n            interleave(this.expressions, ',');\n        },\n        UnaryExpression() {\n            o(this.operator);\n            o(' ');\n            e(this.argument);\n        },\n        BinaryExpression() {\n            o('(');\n            e(this.left);\n            o(this.operator === 'instanceof' ? ' instanceof ' : this.operator);\n            e(this.right);\n            o(')');\n        },\n        AssignmentExpression() {\n            e(this.left);\n            o(this.operator);\n            e(this.right);\n        },\n        UpdateExpression() {\n            if (this.prefix) {\n                o(this.operator);\n                e(this.argument);\n            }\n            else {\n                e(this.argument);\n                o(this.operator);\n            }\n        },\n        LogicalExpression() {\n            o('(');\n            e(this.left);\n            o(this.operator);\n            e(this.right);\n            o(')');\n        },\n        ConditionalExpression() {\n            o('(');\n            e(this.test);\n            o('?');\n            e(this.consequent);\n            o(':');\n            e(this.alternate);\n            o(')');\n        },\n        NewExpression() {\n            o('new (');\n            e(this.callee);\n            o(')');\n            paren(this.arguments);\n        },\n        Super() {\n            o('super');\n        },\n        CallExpression() {\n            if (this.callee instanceof ast_1.ArrowFunctionExpression) {\n                o('(');\n                e(this.callee);\n                o(')');\n            }\n            else\n                e(this.callee);\n            paren(this.arguments);\n        },\n        SpreadElement() {\n            o('...');\n            e(this.argument);\n        },\n        MemberExpressionPlain() {\n            e(this.object);\n            if (this.object instanceof ast_1.Literal && typeof this.object.value === 'number' &&\n                this.object.value === (this.object.value | 0))\n                o('..');\n            else\n                o('.');\n            e(this.property);\n        },\n        MemberExpressionComputed() {\n            e(this.object);\n            o('[');\n            e(this.property);\n            o(']');\n        },\n        YieldExpression() {\n            if (this.argument === null)\n                o('(yield)');\n            else {\n                o(this.delegate ? '(yield* ' : '(yield ');\n                if (this.argument !== null)\n                    e(this.argument);\n                o(')');\n            }\n        },\n        Literal() {\n            o(this.value.toString());\n        },\n        LiteralNull() {\n            o('null');\n        },\n        LiteralString() {\n            o('\"');\n            o(escapeStringForLiteral(this.value));\n            o('\"');\n        },\n        TemplateElement() {\n            o(this.value.raw);\n        },\n        TemplateLiteral() {\n            o('`');\n            e(this.quasis[0]);\n            for (let i = 0; i < this.expressions.length; i = i + 1) {\n                o('${');\n                e(this.expressions[i]);\n                o('}');\n                e(this.quasis[i + 1]);\n            }\n            o('`');\n        },\n        TaggedTemplateExpression() {\n            e(this.tag);\n            e(this.quasi);\n        },\n        AssignmentProperty() {\n            e(this.key);\n            if (this.key !== this.value) {\n                o(':');\n                e(this.value);\n            }\n        },\n        ObjectPattern() {\n            o('{');\n            interleave(this.properties, ',');\n            o('}');\n        },\n        ArrayPattern: arr,\n        RestElement() {\n            o('...');\n            e(this.argument);\n        },\n        MethodDefinitionPlain() {\n            if (this.static)\n                o('static ');\n            if (this.value.async)\n                o('async ');\n            if (this.value.generator)\n                o('*');\n            if (this.kind !== 'method') {\n                o(this.kind);\n                o(' ');\n            }\n            if (this.computed) {\n                o('[');\n                e(this.key);\n                o(']');\n            }\n            else\n                e(this.key);\n            paren(this.value.params);\n            e(this.value.body);\n        },\n        MethodDefinitionConstructor() {\n            o('constructor');\n            paren(this.value.params);\n            e(this.value.body);\n        },\n        ClassBody() {\n            block(this.body, '');\n        },\n        ClassDeclaration: rClass,\n        ClassExpression: rClass,\n        MetaProperty() {\n            e(this.meta);\n            o('.');\n            e(this.property);\n        },\n        ImportDeclaration() {\n            o('import ');\n            let def, namespace;\n            const specifiers = [];\n            for (const s of this.specifiers)\n                if (s instanceof ast_1.ImportDefaultSpecifier)\n                    if (def === undefined)\n                        def = s;\n                    else\n                        throw new Error('Multiple default imports');\n                else if (s instanceof ast_1.ImportNamespaceSpecifier)\n                    if (namespace === undefined)\n                        namespace = s;\n                    else\n                        throw new Error('Multiple namespace imports');\n                else\n                    specifiers.push(s);\n            let needComma = false;\n            if (def !== undefined) {\n                e(def);\n                needComma = true;\n            }\n            if (namespace !== undefined) {\n                if (needComma)\n                    o(',');\n                e(namespace);\n                needComma = true;\n            }\n            if (!isEmpty(specifiers)) {\n                if (needComma)\n                    o(',');\n                o('{');\n                interleave(specifiers, ',');\n                o('}');\n            }\n            o(' from ');\n            e(this.source);\n        },\n        ImportSpecifier() {\n            if (this.imported === this.local)\n                e(this.local);\n            else {\n                e(this.imported);\n                o(' as ');\n                e(this.local);\n            }\n        },\n        ImportDefaultSpecifier() {\n            e(this.local);\n        },\n        ImportNamespaceSpecifier() {\n            o('* as ');\n            e(this.local);\n        },\n        ExportSpecifier() {\n            e(this.local);\n            if (this.exported !== this.local) {\n                o(' as ');\n                e(this.exported);\n            }\n        },\n        ExportNamedDeclaration() {\n            o('export ');\n            if (this.declaration === null) {\n                o('{');\n                interleave(this.specifiers, ',');\n                o('}');\n                if (this.source !== null) {\n                    o(' from ');\n                    e(this.source);\n                }\n            }\n            else\n                e(this.declaration);\n        },\n        ExportDefaultDeclaration() {\n            o('export default ');\n            e(this.declaration);\n        },\n        ExportAllDeclaration() {\n            o('export * from ');\n            e(this.source);\n        }\n    });\n    function outputPropertyKey(_) {\n        if (_.computed) {\n            o('[');\n            e(_.key);\n            o(']');\n        }\n        else\n            e(_.key);\n    }\n    function outputPropertyFunction(_, value) {\n        outputPropertyKey(_);\n        paren(value.params);\n        e(value.body);\n    }\n    function escapeStringForLiteral(str) {\n        return str.replace(/[\\\\\"\\n\\t\\b\\f\\v\\r\\u2028\\u2029]/g, ch => literalEscapes.get(ch));\n    }\n    const literalEscapes = new Map([\n        ['\\\\', '\\\\\\\\'],\n        ['\"', '\\\\\"'],\n        ['\\n', '\\\\n'],\n        ['\\t', '\\\\t'],\n        ['\\b', '\\\\b'],\n        ['\\f', '\\\\f'],\n        ['\\v', '\\\\v'],\n        ['\\r', '\\\\r'],\n        ['\\u2028', '\\\\u2028'],\n        ['\\u2029', '\\\\u2029']]);\n});\n","import * as Ast from 'esast/lib/ast'\nimport Node, {ArrowFunctionExpression, BlockStatement, ForInOfStatement, FunctionExpression, Identifier, ImportDefaultSpecifier,\n\tImportNamespaceSpecifier, ImportSpecifier, Literal, Property} from 'esast/lib/ast'\nimport Loc, {Pos} from 'esast/lib/Loc'\nimport Op, {opEach} from 'op/Op'\nimport {SourceMapGenerator} from 'source-map/dist/source-map.min'\n\n/** Create JavaScript source code from a [[Node]]. */\nexport default function render(ast: Node, options: RenderOptions = {}): string {\n\tsetUp(options)\n\te(ast)\n\tconst res = strOut\n\ttearDown()\n\treturn res\n}\n\n/**\nSame as [[render]], but with a source map as part of the output.\n@param inFilePath Name of input file.\n@param outFilePath Name of output file.\n*/\nexport function renderWithSourceMap(ast: Node, inFilePath: string, outFilePath: string, options: RenderOptions = {}): {code: string, sourceMap: string} {\n\tsetUp(options)\n\tsetUpSourceMaps(inFilePath, outFilePath)\n\te(ast)\n\tconst res = {code: strOut, sourceMap: sourceMap.toJSON()}\n\ttearDown()\n\treturn res\n}\n\nexport interface RenderOptions {\n\t/** If true, will not render unnecessary whitespace. */\n\tugly?: boolean\n}\n\n// Must init these all before rendering.\nlet\n\t// rendering\n\tstrOut: string,\n\tindentAmount: number,\n\tindentStr: string,\n\t// source maps\n\tusingSourceMaps: boolean,\n\tcurAst: Node,\n\tinFilePath: string,\n\tsourceMap: SourceMapGenerator,\n\toutLine: number,\n\toutColumn: number,\n\tlastMappedAst: Op<Node>,\n\t// options\n\tugly: boolean\n\nfunction setUp(options: RenderOptions): void {\n\tugly = Boolean(options.ugly)\n\n\tindentAmount = 0\n\t_setIndent()\n\tstrOut = ''\n\tusingSourceMaps = false\n}\n\nfunction setUpSourceMaps(inPath: string, outPath: string): void {\n\tusingSourceMaps = true\n\tinFilePath = inPath\n\tsourceMap = new SourceMapGenerator({file: outPath})\n\toutLine = Pos.start.line\n\toutColumn = Pos.start.column\n\tlastMappedAst = null\n}\n\nfunction tearDown(): void {\n\tstrOut = inFilePath = sourceMap = curAst = lastMappedAst = null\n}\n\n// Renders a single expression.\nfunction e(ast: Node): void {\n\tif (usingSourceMaps)\n\t\tcurAst = ast;\n\t(<any> ast)[renderSymbol]()\n}\n\n// Outputs a string.\n// str may not contain newlines.\nfunction o(str: string): void {\n\tstrOut = strOut + str\n\tif (usingSourceMaps)\n\t\t_mapStr(str)\n}\n\nfunction interleave(asts: Array<Node>, str: string): void {\n\tif (!isEmpty(asts)) {\n\t\tconst maxI = asts.length - 1\n\t\tfor (let i = 0; i < maxI; i = i + 1) {\n\t\t\te(asts[i])\n\t\t\to(str)\n\t\t}\n\t\te(asts[maxI])\n\t}\n}\n\nfunction paren(asts: Array<Node>): void {\n\to('(')\n\tinterleave(asts, ',')\n\to(')')\n}\n\nfunction block(blockLines: Array<Node>, lineSeparator: string): void {\n\tif (isEmpty(blockLines))\n\t\to('{}')\n\telse {\n\t\to('{')\n\t\tindent()\n\t\tnl()\n\t\tlines(blockLines, lineSeparator)\n\t\tunindent()\n\t\tnl()\n\t\to('}')\n\t}\n}\n\nfunction lines(lines: Array<Node>, lineSeparator: string): void {\n\tif (lines.length > 0) {\n\t\tconst maxI = lines.length - 1\n\t\tfor (let i = 0; i < maxI; i = i + 1) {\n\t\t\te(lines[i])\n\t\t\to(lineSeparator)\n\t\t\tnl()\n\t\t}\n\t\te(lines[maxI])\n\t}\n}\n\nconst indentStrs = ['']\nfunction _setIndent(): void {\n\tindentStr = indentStrs[indentAmount]\n\twhile (indentStr === undefined) {\n\t\tindentStrs.push(`${last(indentStrs)}\\t`)\n\t\tindentStr = indentStrs[indentAmount]\n\t}\n}\n\nfunction indent(): void {\n\tif (!ugly) {\n\t\tindentAmount = indentAmount + 1\n\t\t_setIndent()\n\t}\n}\n\nfunction unindent(): void {\n\tif (!ugly) {\n\t\tindentAmount = indentAmount - 1\n\t\t_setIndent()\n\t}\n}\n\nfunction nl(): void {\n\tif (!ugly) {\n\t\tstrOut = `${strOut}\\n${indentStr}`\n\t\tif (usingSourceMaps)\n\t\t\t_mapNewLine()\n\t}\n}\n\n//Private\nfunction _mapStr(str: string): void {\n\tif (curAst !== lastMappedAst)\n\t\topEach(curAst.loc, loc => {\n\t\t\tsourceMap.addMapping({\n\t\t\t\tsource: inFilePath,\n\t\t\t\toriginal: loc.start,\n\t\t\t\tgenerated: new Pos(outLine, outColumn)\n\t\t\t})\n\t\t\tlastMappedAst = curAst\n\t\t})\n\toutColumn = outColumn + str.length\n}\nfunction _mapNewLine(): void {\n\toutLine = outLine + 1\n\toutColumn = Pos.start.column + indentAmount\n\t// Mappings end at end of line. Must begin anew.\n\tlastMappedAst = null\n}\n\n// Implementations used more than once\n\nfunction fun(): void {\n\tif (this.async)\n\t\to('async ')\n\to('function')\n\tif (this.generator)\n\t\to('*')\n\tif (this.id !== null) {\n\t\to(' ')\n\t\te(this.id)\n\t}\n\tparen(this.params)\n\te(this.body)\n}\n\nfunction arr(): void {\n\tif (isEmpty(this.elements))\n\t\to('[]')\n\telse {\n\t\to('[')\n\t\tinterleave(this.elements, ',')\n\t\to(']')\n\t}\n}\n\nfunction rClass(): void {\n\to('class ')\n\tif (this.id !== null)\n\t\te(this.id)\n\tif (this.superClass !== null) {\n\t\to(' extends ')\n\t\te(this.superClass)\n\t}\n\te(this.body)\n}\n\n//-> function declaration\nfunction forInOf(_: ForInOfStatement, kind: string): void {\n\to('for(')\n\te(_.left)\n\to(kind)\n\te(_.right)\n\to(')')\n\te(_.body)\n}\n\n//-> function declarations\nfunction implementMany(holder: any, method: symbol, nameToImpl: any): void {\n\tObject.keys(nameToImpl).forEach((name: string) => {\n\t\tholder[name].prototype[method] = nameToImpl[name]\n\t})\n}\n\nfunction isEmpty<A>(arr: Array<A>): boolean {\n\treturn arr.length === 0\n}\n\nfunction last<A>(arr: Array<A>): A {\n\treturn arr[arr.length - 1]\n}\n\nconst renderSymbol = Symbol('render')\n\nimplementMany(Ast, renderSymbol, {\n\tProgram() {\n\t\tlines(this.body, ';')\n\t},\n\n\tIdentifier() {\n\t\to(this.name)\n\t},\n\n\t// Statements\n\tEmptyStatement() { },\n\tBlockStatement() {\n\t\tblock(this.body, ';')\n\t},\n\tExpressionStatement() {\n\t\te(this.expression)\n\t},\n\tIfStatement() {\n\t\to('if(')\n\t\te(this.test)\n\t\to(')')\n\t\te(this.consequent)\n\t\tif (this.alternate !== null) {\n\t\t\tif (!(this.consequent instanceof BlockStatement))\n\t\t\t\to(';')\n\t\t\to(' else ')\n\t\t\te(this.alternate)\n\t\t}\n\t},\n\tLabeledStatement() {\n\t\te(this.label)\n\t\to(':')\n\t\te(this.body)\n\t},\n\tBreakStatement() {\n\t\to('break')\n\t\tif (this.label !== null) {\n\t\t\to(' ')\n\t\t\te(this.label)\n\t\t}\n\t},\n\tContinueStatement() {\n\t\to('continue')\n\t\tif (this.label !== null) {\n\t\t\to(' ')\n\t\t\te(this.label)\n\t\t}\n\t},\n\tSwitchCase() {\n\t\tif (this.test === null)\n\t\t\to('default')\n\t\telse {\n\t\t\to('case ')\n\t\t\te(this.test)\n\t\t}\n\t\to(':')\n\t\tswitch (this.consequent.length) {\n\t\t\tcase 0:\n\t\t\t\tbreak\n\t\t\tcase 1:\n\t\t\t\te(this.consequent[0])\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tindent()\n\t\t\t\tnl()\n\t\t\t\tlines(this.consequent, ';')\n\t\t\t\tunindent()\n\t\t}\n\t},\n\tSwitchStatement() {\n\t\to('switch(')\n\t\te(this.discriminant)\n\t\to(')')\n\t\tblock(this.cases, '')\n\t},\n\tReturnStatement() {\n\t\tif (this.argument === null)\n\t\t\to('return')\n\t\telse {\n\t\t\to('return ')\n\t\t\te(this.argument)\n\t\t}\n\t},\n\tThrowStatement() {\n\t\to('throw ')\n\t\te(this.argument)\n\t},\n\tCatchClause() {\n\t\to('catch(')\n\t\te(this.param)\n\t\to(')')\n\t\te(this.body)\n\t},\n\tTryStatement() {\n\t\to('try ')\n\t\te(this.block)\n\t\tif (this.handler !== null)\n\t\t\te(this.handler)\n\t\tif (this.finalizer !== null) {\n\t\t\to('finally')\n\t\t\te(this.finalizer)\n\t\t}\n\t},\n\tWhileStatement() {\n\t\to('while(')\n\t\te(this.test)\n\t\to(')')\n\t\te(this.body)\n\t},\n\tDoWhileStatement() {\n\t\to('do ')\n\t\te(this.body)\n\t\tif (!(this.body instanceof BlockStatement))\n\t\t\to(';')\n\t\to(' while(')\n\t\te(this.test)\n\t\to(')')\n\t},\n\tForStatement() {\n\t\to('for(')\n\t\tif (this.init !== null)\n\t\t\te(this.init)\n\t\to(';')\n\t\tif (this.test !== null)\n\t\t\te(this.test)\n\t\to(';')\n\t\tif (this.update !== null)\n\t\t\te(this.update)\n\t\to(')')\n\t\te(this.body)\n\t},\n\tForInStatement() {\n\t\tforInOf(this, ' in ')\n\t},\n\tForOfStatement() {\n\t\tforInOf(this, ' of ')\n\t},\n\tDebuggerStatement() {\n\t\to('debugger')\n\t},\n\n\t// Declarations\n\tFunctionDeclaration: fun,\n\tVariableDeclarator() {\n\t\te(this.id)\n\t\tif (this.init !== null) {\n\t\t\to('=')\n\t\t\te(this.init)\n\t\t}\n\t},\n\tVariableDeclaration() {\n\t\to(this.kind)\n\t\to(' ')\n\t\tinterleave(this.declarations, ',')\n\t},\n\n\t// Expressions\n\tThisExpression() {\n\t\to('this')\n\t},\n\tArrayExpression: arr,\n\tObjectExpression() {\n\t\tif (isEmpty(this.properties))\n\t\t\to('{}')\n\t\telse\n\t\t\tblock(this.properties, ',')\n\t},\n\tPropertyPlain() {\n\t\toutputPropertyKey(this)\n\t\to(':')\n\t\te(this.value)\n\t},\n\tPropertyMethod() {\n\t\tif (this.value.async)\n\t\t\to('async ')\n\t\tif (this.value.generator)\n\t\t\to('*')\n\t\toutputPropertyFunction(this, this.value)\n\t},\n\tPropertyGet() {\n\t\to('get ')\n\t\toutputPropertyFunction(this, this.value)\n\t},\n\tPropertySet() {\n\t\to('set ')\n\t\toutputPropertyFunction(this, this.value)\n\t},\n\n\tFunctionExpression: fun,\n\tArrowFunctionExpression() {\n\t\tif (this.params.length === 1 && this.params[0] instanceof Identifier)\n\t\t\te(this.params[0])\n\t\telse\n\t\t\tparen(this.params)\n\t\to('=>')\n\t\te(this.body)\n\t},\n\tSequenceExpression() {\n\t\tinterleave(this.expressions, ',')\n\t},\n\tUnaryExpression() {\n\t\to(this.operator)\n\t\to(' ')\n\t\te(this.argument)\n\t},\n\tBinaryExpression() {\n\t\to('(')\n\t\te(this.left)\n\t\to(this.operator === 'instanceof' ? ' instanceof ' : this.operator)\n\t\te(this.right)\n\t\to(')')\n\t},\n\tAssignmentExpression() {\n\t\te(this.left)\n\t\to(this.operator)\n\t\te(this.right)\n\t},\n\tUpdateExpression() {\n\t\tif (this.prefix) {\n\t\t\to(this.operator)\n\t\t\te(this.argument)\n\t\t} else {\n\t\t\te(this.argument)\n\t\t\to(this.operator)\n\t\t}\n\t},\n\tLogicalExpression() {\n\t\to('(')\n\t\te(this.left)\n\t\to(this.operator)\n\t\te(this.right)\n\t\to(')')\n\t},\n\tConditionalExpression() {\n\t\to('(')\n\t\te(this.test)\n\t\to('?')\n\t\te(this.consequent)\n\t\to(':')\n\t\te(this.alternate)\n\t\to(')')\n\t},\n\tNewExpression() {\n\t\to('new (')\n\t\te(this.callee)\n\t\to(')')\n\t\tparen(this.arguments)\n\t},\n\tSuper() {\n\t\to('super')\n\t},\n\tCallExpression() {\n\t\tif (this.callee instanceof ArrowFunctionExpression) {\n\t\t\to('(')\n\t\t\te(this.callee)\n\t\t\to(')')\n\t\t} else\n\t\t\te(this.callee)\n\t\tparen(this.arguments)\n\t},\n\tSpreadElement() {\n\t\to('...')\n\t\te(this.argument)\n\t},\n\tMemberExpressionPlain() {\n\t\te(this.object)\n\t\t//NumberLiteral\n\t\tif (this.object instanceof Literal && typeof this.object.value === 'number' &&\n\t\t\tthis.object.value === (this.object.value | 0))\n\t\t\to('..')\n\t\telse\n\t\t\to('.')\n\t\te(this.property)\n\t},\n\tMemberExpressionComputed() {\n\t\te(this.object)\n\t\to('[')\n\t\te(this.property)\n\t\to(']')\n\t},\n\tYieldExpression() {\n\t\tif (this.argument === null)\n\t\t\to('(yield)')\n\t\telse {\n\t\t\to(this.delegate ? '(yield* ' : '(yield ')\n\t\t\tif (this.argument !== null)\n\t\t\t\te(this.argument)\n\t\t\to(')')\n\t\t}\n\t},\n\t// Boolean, Number, RegExp all have same implementation\n\tLiteral() {\n\t\to(this.value.toString())\n\t},\n\tLiteralNull() {\n\t\to('null')\n\t},\n\tLiteralString() {\n\t\to('\"')\n\t\to(escapeStringForLiteral(this.value))\n\t\to('\"')\n\t},\n\t// Templates\n\tTemplateElement() {\n\t\to(this.value.raw)\n\t},\n\tTemplateLiteral() {\n\t\to('`')\n\t\te(this.quasis[0])\n\t\tfor (let i = 0; i < this.expressions.length; i = i + 1)\t {\n\t\t\to('${')\n\t\t\te(this.expressions[i])\n\t\t\to('}')\n\t\t\te(this.quasis[i + 1])\n\t\t}\n\t\to('`')\n\t},\n\tTaggedTemplateExpression() {\n\t\te(this.tag)\n\t\te(this.quasi)\n\t},\n\n\t// Patterns\n\tAssignmentProperty() {\n\t\te(this.key)\n\t\tif (this.key !== this.value) {\n\t\t\to(':')\n\t\t\te(this.value)\n\t\t}\n\t},\n\tObjectPattern() {\n\t\to('{')\n\t\tinterleave(this.properties, ',')\n\t\to('}')\n\t},\n\tArrayPattern: arr,\n\tRestElement() {\n\t\to('...')\n\t\te(this.argument)\n\t},\n\n\tMethodDefinitionPlain() {\n\t\tif (this.static)\n\t\t\to('static ')\n\n\t\tif (this.value.async)\n\t\t\to('async ')\n\t\tif (this.value.generator)\n\t\t\to('*')\n\n\t\tif (this.kind !== 'method') {\n\t\t\to(this.kind) // 'get' or 'set'\n\t\t\to(' ')\n\t\t}\n\n\t\tif (this.computed) {\n\t\t\to('[')\n\t\t\te(this.key)\n\t\t\to(']')\n\t\t} else\n\t\t\te(this.key)\n\n\t\tparen(this.value.params)\n\t\te(this.value.body)\n\t},\n\n\tMethodDefinitionConstructor() {\n\t\to('constructor')\n\t\tparen(this.value.params)\n\t\te(this.value.body)\n\t},\n\n\tClassBody() {\n\t\tblock(this.body, '')\n\t},\n\n\tClassDeclaration: rClass,\n\tClassExpression: rClass,\n\n\tMetaProperty() {\n\t\te(this.meta)\n\t\to('.')\n\t\te(this.property)\n\t},\n\n\tImportDeclaration() {\n\t\to('import ')\n\n\t\tlet def: ImportDefaultSpecifier, namespace: ImportNamespaceSpecifier\n\t\tconst specifiers: Array<ImportSpecifier> = []\n\t\tfor (const s of this.specifiers)\n\t\t\tif (s instanceof ImportDefaultSpecifier)\n\t\t\t\tif (def === undefined)\n\t\t\t\t\tdef = s\n\t\t\t\telse\n\t\t\t\t\tthrow new Error('Multiple default imports')\n\t\t\telse if (s instanceof ImportNamespaceSpecifier)\n\t\t\t\tif (namespace === undefined)\n\t\t\t\t\tnamespace = s\n\t\t\t\telse\n\t\t\t\t\tthrow new Error('Multiple namespace imports')\n\t\t\telse\n\t\t\t\t// ImportSpecifier\n\t\t\t\tspecifiers.push(s)\n\n\t\tlet needComma = false\n\t\tif (def !== undefined) {\n\t\t\te(def)\n\t\t\tneedComma = true\n\t\t}\n\t\tif (namespace !== undefined) {\n\t\t\tif (needComma)\n\t\t\t\to(',')\n\t\t\te(namespace)\n\t\t\tneedComma = true\n\t\t}\n\t\tif (!isEmpty(specifiers)) {\n\t\t\tif (needComma)\n\t\t\t\to(',')\n\t\t\to('{')\n\t\t\tinterleave(specifiers, ',')\n\t\t\to('}')\n\t\t}\n\n\t\to(' from ')\n\t\te(this.source)\n\t},\n\tImportSpecifier() {\n\t\tif (this.imported === this.local)\n\t\t\te(this.local)\n\t\telse {\n\t\t\te(this.imported)\n\t\t\to(' as ')\n\t\t\te(this.local)\n\t\t}\n\t},\n\tImportDefaultSpecifier() {\n\t\te(this.local)\n\t},\n\tImportNamespaceSpecifier() {\n\t\to('* as ')\n\t\te(this.local)\n\t},\n\n\tExportSpecifier() {\n\t\te(this.local)\n\t\tif (this.exported !== this.local) {\n\t\t\to(' as ')\n\t\t\te(this.exported)\n\t\t}\n\t},\n\tExportNamedDeclaration() {\n\t\to('export ')\n\t\tif (this.declaration === null) {\n\t\t\to('{')\n\t\t\tinterleave(this.specifiers, ',')\n\t\t\to('}')\n\t\t\tif (this.source !== null) {\n\t\t\t\to(' from ')\n\t\t\t\te(this.source)\n\t\t\t}\n\t\t} else\n\t\t\te(this.declaration)\n\t},\n\tExportDefaultDeclaration() {\n\t\to('export default ')\n\t\te(this.declaration)\n\t},\n\tExportAllDeclaration() {\n\t\to('export * from ')\n\t\te(this.source)\n\t}\n})\n\nfunction outputPropertyKey(_: Property) {\n\tif (_.computed) {\n\t\to('[')\n\t\te(_.key)\n\t\to(']')\n\t} else\n\t\te(_.key)\n}\n\nfunction outputPropertyFunction(_: Property, value: FunctionExpression) {\n\toutputPropertyKey(_)\n\tparen(value.params)\n\te(value.body)\n}\n\nfunction escapeStringForLiteral(str: string): string {\n\t//todo: callback shouldn't have to be so verbose\n\treturn str.replace(/[\\\\\"\\n\\t\\b\\f\\v\\r\\u2028\\u2029]/g, ch => literalEscapes.get(ch))\n}\n\nconst literalEscapes: Map<string, string> = new Map([\n\t['\\\\', '\\\\\\\\'],\n\t['\"', '\\\\\"'],\n\t['\\n', '\\\\n'],\n\t['\\t', '\\\\t'],\n\t['\\b', '\\\\b'],\n\t['\\f', '\\\\f'],\n\t['\\v', '\\\\v'],\n\t['\\r', '\\\\r'],\n\t['\\u2028', '\\\\u2028'],\n\t['\\u2029', '\\\\u2029']])\n"],"sourceRoot":"/source/"}